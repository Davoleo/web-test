.flex-parent {
    display: flex;
    flex-direction: column;
    /* Still not supported on Safari */
    /*gap: 3em;*/
}

/* A way to replicate the gap between flexbox elements */
.flex-parent > * + * {
    margin: 3em 0 0 0;
}

@media (min-width: 60em) {
    .flex-parent {
        flex-direction: row;
    }

    /* You also need to override the margin wether you have items in rows or columns since it won't automatically adapt */
    .flex-parent > * + * {
        margin: 0 0 0 3em;
    }
}

/* Content styling */
:root {
    --color-primary: #ee6352;
    --color-body: #333;
    --color-bg: #ddd;
}

body {
    font-family: Roboto, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1.125em;
    line-height: 1.6;
    color: var(--color-body);
    background-color: white;
    margin-top: 5em;
}

.flex-parent > * {
    padding: 1em;
    background: #234;
    outline: 5px solid limegreen;
    color: white;

    /* Sets the width or the height depending on the main axis orientation (more flexible in flexbox structures) */
    /*flex-basis: 200px;*/
    /* Controls whether the child container should extend to unused space (they can become larger than the basis) */
    /* the number controls the proportion of how much they grow depending on other flex-grow elements */
    /*flex-grow: 1;*/
    /* Works the same as flex-grow but it's a multiplier to shrink when there isn't enough space for all the elements to fit*/
    /*flex-shrink: 0;*/
}

.content {
    width: 70vw;
    padding: 3em;
    border: 2px var(--color-bg) solid;
    box-shadow: 0 0 3em rgba(0,0,0,.15);
}

.title {
    margin: 0 0 .5em;
    font-weight: 900;
    color: var(--color-primary);
    line-height: .8;
}
